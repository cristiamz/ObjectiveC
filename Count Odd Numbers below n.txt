int odd_count(int n){
  return n / 2;
}

//Unit Test
// TODO: Replace examples and use TDD development by writing your own tests
@implementation TestSuite
+ (void)assertOdd_count: (int)expected andActual: (int)actual
{
  // NOTE: this custom assertion method is required because UnitKit
  // UKIntsEqual cannot safely handle `unsigned long long`s
  if (actual != expected) NSLog(@"Expected: %llu, instead got: %llu\n", expected, actual);
  UKTrue(actual == expected);
}
- (void)testExamples
{
  [TestSuite assertOdd_count: 7 andActual: odd_count(15)];
  [TestSuite assertOdd_count: 7511 andActual: odd_count(15023)];
}
- (void)testFixed
{
  [TestSuite assertOdd_count: 12 andActual: odd_count(25)];
  [TestSuite assertOdd_count: 227444 andActual: odd_count(454888)];
}
- (void)testRandom
{
  srand(time(NULL));
  int (^solution)(int) = ^ int (int n) {
    return n / 2;
  };
  for (int i = 0; i < 100; i++) {
    int n = 1 + rand() % 69;
    [TestSuite assertOdd_count: solution(n) andActual: odd_count(n)];
  }
}
@end
